{"numFailedTestSuites":1,"numFailedTests":3,"numPassedTestSuites":0,"numPassedTests":7,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":10,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1685517340376,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["💡 Part 1: 항공권 목록 필터링","🧩 Main 컴포넌트에서 항공편을 조회합니다"],"failureMessages":[],"fullName":"💡 Part 1: 항공권 목록 필터링 🧩 Main 컴포넌트에서 항공편을 조회합니다 Main 컴포넌트 내 `search` 함수는 검색 조건을 담고 있는 상태 객체 `condition`을 업데이트해야 합니다","location":null,"status":"passed","title":"Main 컴포넌트 내 `search` 함수는 검색 조건을 담고 있는 상태 객체 `condition`을 업데이트해야 합니다"},{"ancestorTitles":["💡 Part 1: 항공권 목록 필터링","🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다"],"failureMessages":[],"fullName":"💡 Part 1: 항공권 목록 필터링 🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다 검색 화면이 Search 컴포넌트로 분리되어야 합니다","location":null,"status":"passed","title":"검색 화면이 Search 컴포넌트로 분리되어야 합니다"},{"ancestorTitles":["💡 Part 1: 항공권 목록 필터링","🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다"],"failureMessages":[],"fullName":"💡 Part 1: 항공권 목록 필터링 🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다 Search 컴포넌트에는 상태 변경 함수 `search`가 `onSearch` props로 전달되어야 합니다","location":null,"status":"passed","title":"Search 컴포넌트에는 상태 변경 함수 `search`가 `onSearch` props로 전달되어야 합니다"},{"ancestorTitles":["💡 Part 1: 항공권 목록 필터링","🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다"],"failureMessages":[],"fullName":"💡 Part 1: 항공권 목록 필터링 🧩 Search 컴포넌트를 통해 상태 끌어올리기를 학습합니다 상태 변경 함수 `search`는 Search 컴포넌트의 `검색` 버튼 클릭 시 실행되어야 합니다","location":null,"status":"passed","title":"상태 변경 함수 `search`는 Search 컴포넌트의 `검색` 버튼 클릭 시 실행되어야 합니다"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 Side Effect는 useEffect에서 다뤄야 합니다"],"failureMessages":[],"fullName":"💡 Part 2: AJAX 요청 🧩 Side Effect는 useEffect에서 다뤄야 합니다 검색 조건이 바뀔 때마다, FlightDataApi의 getFlight를 검색 조건과 함께 요청해야 합니다","location":null,"status":"passed","title":"검색 조건이 바뀔 때마다, FlightDataApi의 getFlight를 검색 조건과 함께 요청해야 합니다"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 Side Effect는 useEffect에서 다뤄야 합니다"],"failureMessages":[],"fullName":"💡 Part 2: AJAX 요청 🧩 Side Effect는 useEffect에서 다뤄야 합니다 getFlight의 결과를 받아, flightList 상태를 업데이트해야 합니다","location":null,"status":"passed","title":"getFlight의 결과를 받아, flightList 상태를 업데이트해야 합니다"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 Side Effect는 useEffect에서 다뤄야 합니다"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.<anonymous> (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\__tests__\\index.test.js:125:86)\n    at Object.asyncJestTest (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41"],"fullName":"💡 Part 2: AJAX 요청 🧩 Side Effect는 useEffect에서 다뤄야 합니다 더이상, 컴포넌트 내 필터 함수 `filterByCondition`를 사용하지 않습니다","location":null,"status":"failed","title":"더이상, 컴포넌트 내 필터 함수 `filterByCondition`를 사용하지 않습니다"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 Side Effect는 useEffect에서 다뤄야 합니다"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at Object.<anonymous> (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\__tests__\\index.test.js:134:9)\n    at Object.asyncJestTest (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41"],"fullName":"💡 Part 2: AJAX 요청 🧩 Side Effect는 useEffect에서 다뤄야 합니다 더이상, 하드코딩된 flightList JSON을 사용하지 않습니다 (초기값은 빈 배열로 둡니다)","location":null,"status":"failed","title":"더이상, 하드코딩된 flightList JSON을 사용하지 않습니다 (초기값은 빈 배열로 둡니다)"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 Side Effect는 useEffect에서 다뤄야 합니다"],"failureMessages":[],"fullName":"💡 Part 2: AJAX 요청 🧩 Side Effect는 useEffect에서 다뤄야 합니다 getFlight 요청이 다소 느리므로, 로딩 상태에 따라 LoadingIndicator 컴포넌트를 표시해야 합니다","location":null,"status":"passed","title":"getFlight 요청이 다소 느리므로, 로딩 상태에 따라 LoadingIndicator 컴포넌트를 표시해야 합니다"},{"ancestorTitles":["💡 Part 2: AJAX 요청","🧩 FlightDataApi에서 기존 구현 대신, REST API를 호출하도록 바꿉니다"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  -  0\n+ Received  + 28\n\n@@ -2,8 +2,36 @@\n    Object {\n      \"arrival_times\": \"2021-12-03T12:00:00\",\n      \"departure\": \"ICN\",\n      \"departure_times\": \"2021-12-02T12:00:00\",\n      \"destination\": \"CJU\",\n+     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba40bed\",\n+   },\n+   Object {\n+     \"arrival_times\": \"2021-12-04T12:00:00\",\n+     \"departure\": \"ICN\",\n+     \"departure_times\": \"2021-12-03T12:00:00\",\n+     \"destination\": \"CJU\",\n+     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba48bed\",\n+   },\n+   Object {\n+     \"arrival_times\": \"2021-12-04T12:00:00\",\n+     \"departure\": \"ICN\",\n+     \"departure_times\": \"2021-12-03T12:00:00\",\n+     \"destination\": \"CJU\",\n+     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdbr40bed\",\n+   },\n+   Object {\n+     \"arrival_times\": \"2021-12-03T12:00:00\",\n+     \"departure\": \"ICN\",\n+     \"departure_times\": \"2021-12-02T12:00:00\",\n+     \"destination\": \"CJU\",\n      \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba40bod\",\n+   },\n+   Object {\n+     \"arrival_times\": \"2021-12-03T12:00:00\",\n+     \"departure\": \"ICN\",\n+     \"departure_times\": \"2021-12-03T12:00:00\",\n+     \"destination\": \"CJU\",\n+     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba44bed\",\n    },\n  ]\n    at C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\__tests__\\index.test.js:168:22\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at processTimers (node:internal/timers:509:9)"],"fullName":"💡 Part 2: AJAX 요청 🧩 FlightDataApi에서 기존 구현 대신, REST API를 호출하도록 바꿉니다 검색 조건과 함께 StatesAirline 서버에서 항공편 정보를 요청(fetch)합니다","location":null,"status":"failed","title":"검색 조건과 함께 StatesAirline 서버에서 항공편 정보를 요청(fetch)합니다"}],"endTime":1685517346066,"message":"  ● 💡 Part 2: AJAX 요청 › 🧩 Side Effect는 useEffect에서 다뤄야 합니다 › 더이상, 컴포넌트 내 필터 함수 `filterByCondition`를 사용하지 않습니다\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      123 | \n      124 |     test('더이상, 컴포넌트 내 필터 함수 `filterByCondition`를 사용하지 않습니다', () => {\n    > 125 |       expect(Main.toString().split('return __jsx')[1].includes('filterByCondition')).toBe(false);\n          |                                                                                      ^\n      126 |     });\n      127 | \n      128 |     test('더이상, 하드코딩된 flightList JSON을 사용하지 않습니다 (초기값은 빈 배열로 둡니다)', () => {\n\n      at Object.<anonymous> (__tests__/index.test.js:125:86)\n\n  ● 💡 Part 2: AJAX 요청 › 🧩 Side Effect는 useEffect에서 다뤄야 합니다 › 더이상, 하드코딩된 flightList JSON을 사용하지 않습니다 (초기값은 빈 배열로 둡니다)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      132 |         file.includes(\"import json from '../resource/flightList'\") ||\n      133 |           file.includes('import json from \"../resource/flightList\"')\n    > 134 |       ).toBe(false);\n          |         ^\n      135 |     });\n      136 | \n      137 |     test('getFlight 요청이 다소 느리므로, 로딩 상태에 따라 LoadingIndicator 컴포넌트를 표시해야 합니다', async () => {\n\n      at Object.<anonymous> (__tests__/index.test.js:134:9)\n\n  ● 💡 Part 2: AJAX 요청 › 🧩 FlightDataApi에서 기존 구현 대신, REST API를 호출하도록 바꿉니다 › 검색 조건과 함께 StatesAirline 서버에서 항공편 정보를 요청(fetch)합니다\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  -  0\n    + Received  + 28\n\n    @@ -2,8 +2,36 @@\n        Object {\n          \"arrival_times\": \"2021-12-03T12:00:00\",\n          \"departure\": \"ICN\",\n          \"departure_times\": \"2021-12-02T12:00:00\",\n          \"destination\": \"CJU\",\n    +     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba40bed\",\n    +   },\n    +   Object {\n    +     \"arrival_times\": \"2021-12-04T12:00:00\",\n    +     \"departure\": \"ICN\",\n    +     \"departure_times\": \"2021-12-03T12:00:00\",\n    +     \"destination\": \"CJU\",\n    +     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba48bed\",\n    +   },\n    +   Object {\n    +     \"arrival_times\": \"2021-12-04T12:00:00\",\n    +     \"departure\": \"ICN\",\n    +     \"departure_times\": \"2021-12-03T12:00:00\",\n    +     \"destination\": \"CJU\",\n    +     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdbr40bed\",\n    +   },\n    +   Object {\n    +     \"arrival_times\": \"2021-12-03T12:00:00\",\n    +     \"departure\": \"ICN\",\n    +     \"departure_times\": \"2021-12-02T12:00:00\",\n    +     \"destination\": \"CJU\",\n          \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba40bod\",\n    +   },\n    +   Object {\n    +     \"arrival_times\": \"2021-12-03T12:00:00\",\n    +     \"departure\": \"ICN\",\n    +     \"departure_times\": \"2021-12-03T12:00:00\",\n    +     \"destination\": \"CJU\",\n    +     \"uuid\": \"af6fa55c-da65-47dd-af23-578fdba44bed\",\n        },\n      ]\n\n      166 | \n      167 |       Api.getFlight({ departure: 'ICN', destination: 'CJU' }).then((json) => {\n    > 168 |         expect(json).toEqual(result);\n          |                      ^\n      169 |         const ajaxCallCount = scope.interceptors[0].interceptionCounter;\n      170 |         expect(ajaxCallCount).toEqual(1); // ajax call이 1회 발생\n      171 |         expect(scope.interceptors[0].statusCode).toEqual(200);\n\n      at __tests__/index.test.js:168:22\n","name":"C:\\Users\\Admin\\Desktop\\코딩공부\\코드스테이츠\\week8\\fe-sprint-statesairline-client-master\\__tests__\\index.test.js","startTime":1685517341691,"status":"failed","summary":""}],"wasInterrupted":false}